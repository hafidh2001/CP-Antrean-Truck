<?php

class MMembershipCustomer extends ActiveRecord
{

	public function tableName()
	{
		return 'm_membership_customer';
	}

	public function rules()
	{
		return array(
			array('id_membership, id_customer, start_date, created_date, id_client', 'required'),
			array('id_membership, id_customer, id_client', 'numerical', 'integerOnly'=>true),
			array('status', 'length', 'max'=>256),
			array('end_date', 'safe'),
		);
	}

	public function relations()
	{
		return array(
			'idCustomer' => array(self::BELONGS_TO, 'MCustomer', 'id_customer'),
			'idMembership' => array(self::BELONGS_TO, 'MMembershipLevel', 'id_membership'),
			'idClient' => array(self::BELONGS_TO, 'MClient', 'id_client'),
		);
	}

	public function attributeLabels()
	{
		return array(
			'id' => 'ID',
			'id_membership' => 'Id Membership',
			'id_customer' => 'Id Customer',
			'start_date' => 'Start Date',
			'end_date' => 'End Date',
			'status' => 'Status',
			'created_date' => 'Created Date',
			'id_client' => 'Id Client',
		);
	}

	public function getMembershipModel($id_user=null, $id_client=0){
	    
	   $query = "select c.name as cust_name, 
            c.id as cust_id, 
            coalesce(sum(t.poin) filter(WHERE t.poin>=0 and t.status='Active' and t.created_date between mc.start_date and mc.end_date),0) as points, 
            mc.id cust_member_id,  
            
            sum(t.poin) filter(WHERE t.status='Active') as credits, 
            l.level,
            l.minimum_points,
            x.minimum_points as next_level_poin,
            x.level as next_level,
            coalesce(x.minimum_points,0) - coalesce(sum(t.poin) filter(WHERE t.poin>=0 and t.status='Active' and t.created_date between mc.start_date and mc.end_date),0) point_needed,
            mc.start_date,
            mc.end_date
            from  t_customer_poin t
            left join m_customer c on t.id_customer = c.id
            left join m_client cl on c.id_client = cl.id
            left join m_membership_customer mc on mc.id_customer = c.id and mc.status='Active'         
            left join m_membership_level l on mc.id_membership = l.id
            left join m_membership_level x on x.id=(select xl.id from m_membership_level xl where xl.minimum_points > l.minimum_points and xl.id_client=l.id_client  order by xl.minimum_points asc limit 1)
            
            where t.status ='Active' and (t.expired_date >= now() OR t.expired_date is null) and t.id_customer=$id_user
            
            group by c.name, l.level,l.minimum_points,x.minimum_points,x.level ,c.id,mc.end_date,mc.id";
            
            
            
            
            
            // print_r($query);die;
            
        $sql = Yii::app()->db->createCommand($query);
        $result = $sql->queryRow();   
        
        if(!$result){
            $query = "select c.name as cust_name, 
            c.id as cust_id, 
           0 as points, 
            mc.id cust_member_id,  
            
            0 as credits, 
            l.level,
            l.minimum_points,
            x.minimum_points as next_level_poin,
            x.level as next_level,
            coalesce(x.minimum_points,0) - coalesce(sum(0) filter(WHERE 0>=0 ),0) point_needed,
            mc.start_date,
            mc.end_date
            from  m_customer c
            left join m_client cl on c.id_client = cl.id
            left join m_membership_customer mc on mc.id_customer = c.id and mc.status='Active'         
            left join m_membership_level l on mc.id_membership = l.id
            left join m_membership_level x on x.id=(select xl.id from m_membership_level xl where xl.minimum_points > l.minimum_points and xl.id_client=l.id_client  order by xl.minimum_points asc limit 1)
            
            where c.id=$id_user
            
            group by c.name, l.level,l.minimum_points,x.minimum_points,x.level ,c.id,mc.end_date,mc.id";
            
            $sql = Yii::app()->db->createCommand($query);
        $result = $sql->queryRow();   
            
        }
        
        $point = $result["minimum_points"];
        // return $result["start_date"];
        $queryLevels ="SELECT id, level, id_client, minimum_points, start_points, scale_points,
        case when $point >= minimum_points then 1 else 0 end as achieved
        FROM m_membership_level
WHERE id_client = $id_client order by minimum_points asc";

        $sqlLevels = Yii::app()->db->createCommand($queryLevels);
        $resultLevels = $sqlLevels->queryAll();
        
        $result["membershipLevels"] = $resultLevels;
        return $result;
            
	}
	
	
	public function checkLevelUp($id_user=null, $id_client=0){
	    
	    
        //die();
                
                 $query = "select c.name as cust_name,             
       c.id as cust_id,             
       c.id_client,            
       coalesce(sum(t.poin) filter(WHERE t.poin>=0 and t.status='Active' and t.created_date between mc.start_date and mc.end_date),0) as points, mc.id cust_member_id,            
       l.id as level_id, 
       l.level,
       l.minimum_points,

       x.minimum_points as next_level_poin,            
       x.level as next_level,            
       x.id as next_level_id,            
       x.minimum_points - coalesce(sum(t.poin) filter(WHERE t.poin>=0 and t.status='Active'and t.created_date between mc.start_date and mc.end_date),0) point_needed,           
       case when x.minimum_points - sum(t.poin) filter(WHERE t.poin>=0 and t.status='Active' and t.created_date between mc.start_date and mc.end_date) <=0 then 1 else 0 end level_up,  

       y.minimum_points as prev_level_poin,            
       y.level as prev_level,            
       y.id as prev_level_id,   
       coalesce(sum(t.poin) filter(WHERE t.poin>=0 and t.status='Active' and t.created_date between mc.start_date and mc.end_date),0) - l.minimum_points point_exceeded,           
       case when coalesce(sum(t.poin) filter(WHERE t.poin>=0 and t.status='Active' and t.created_date between mc.start_date and mc.end_date),0)-l.minimum_points <=0 then 1 else 0 end level_down,
          mc.start_date,
mc.end_date            
from  t_customer_poin t            
left join m_customer c on t.id_customer = c.id            
left join m_client cl on c.id_client = cl.id            
left join m_membership_customer mc on mc.id_customer = c.id and mc.status='Active'         
left join m_membership_level l on mc.id_membership = l.id            
left join m_membership_level x on x.id=(select xl.id from m_membership_level xl where xl.minimum_points >l.minimum_points and xl.id_client=l.id_client  order by xl.minimum_points asc limit 1)                       

left join m_membership_level y on y.id=(select yl.id from m_membership_level yl where yl.minimum_points < l.minimum_points and yl.id_client=l.id_client  order by yl.minimum_points desc limit 1)                       

 where t.status ='Active' and (t.expired_date >= now() OR t.expired_date is null) and t.id_customer=$id_user
group by c.name,mc.id,c.id_client,l.id, l.level, l.minimum_points,x.minimum_points,x.level, x.id ,c.id,mc.start_date,mc.end_date ,y.minimum_points,y.level, y.id ";
            
            
            // $temp = new Temp();
            // $temp->text = json_encode("-^-"); 
            // $temp->date = date('Y-m-d H:i:s');
            // $temp->save();
            
            // $temp = new Temp();
            // $temp->text = json_encode($query); 
            // $temp->date = date('Y-m-d H:i:s');
            // $temp->save();
        
        
            $sql = Yii::app()->db->createCommand($query);
            $result = $sql->queryRow();  
            
            // echo(json_encode($result));
            // die;
            
            // $temp = new Temp();
            // $temp->text = json_encode($result); 
            // $temp->date = date('Y-m-d H:i:s');
            // $temp->save();
            
            
            
            
            if(!$result){return;}
            
            if($result["level_up"]==1){
                $current = MMembershipCustomer::model()->findByAttributes(['id_customer' => $id_user, 'status'=>'Active']);
                $current->status='Inactive';
                $tempEndDate=$current->end_date;
                $current->end_date=date('Y-m-d H:i:s');
                
                //$current->save();
                
                $lv = MMembershipLevel::model()->findByAttributes(['id' => $result["next_level_id"]]);
                
                if($lv){
                    $tempEndDate = '2099-12-31 00:00:00';
                    if($lv->period > 0){
                            // print_r("+".strval($lv->period)." month");die;
                            $x = "+".strval($lv->period)." month";
                            $tempEndDate = date("Y-m-d  H:i:s", strtotime($x, strtotime(date("Y-m-d  H:i:s"))));
                            
                            // die;
                        }
                }
                
                $tobe = new MMembershipCustomer();
                $tobe->id_membership = $result["next_level_id"];
                $tobe->id_customer = $id_user;
                $tobe->start_date = date('Y-m-d H:i:s');
                $tobe->end_date = $tempEndDate;
                $tobe->status = "Active";
                $tobe->created_date = date('Y-m-d H:i:s');
                $tobe->id_client = $result["id_client"];
                if($tobe->save()){
                    $current->save();
                }
                
                // $temp = new Temp();
                // $temp->text = json_encode($tobe->attributes); 
                // $temp->save();
                
            }
            // else if($result["level_down"]==1){
                
                
                
            //     $current = MMembershipCustomer::model()->findByAttributes(['id_customer' => $id_user, 'status'=>'Active']);
            //     $current->status='Inactive';
            //     $tempEndDate=$current->end_date;
            //     $current->end_date=date('Y-m-d');
                
            //     //$current->save();
                
                
            //     if(strtotime(date("Y-m-d")) > strtotime($result["end_date"])){
                    
                    
            //         $lv = MMembershipLevel::model()->findByAttributes(['id' => $result["prev_level_id"]]);
            //         if($lv){
            //             $tempEndDateX = '2099-12-31';
            //             if($lv->period > 0){
            //                 $tempEndDateX =date("Y-m-d", strtotime("+".strval($lv->period)." month", strtotime(date("Y-m-d"))));
            //             }
            //             $tobe = new MMembershipCustomer();
            //             $tobe->id_membership = $result["prev_level_id"];
            //             $tobe->id_customer = $id_user;
            //             $tobe->start_date = date('Y-m-d');
            //             $tobe->end_date = $tempEndDateX;
            //             $tobe->status = "Active";
            //             $tobe->created_date = date('Y-m-d H:i:s');
            //             $tobe->id_client = $result["id_client"];
            //             if($tobe->save()){
            //                 $current->save();
            //             }    
            //         }
                    
                    
            //     }else{
                    
            //         $lv = MMembershipLevel::model()->findByAttributes(['id' => $result["prev_level_id"]]);
            //         if($lv){
            //             $tempEndDateX = '2099-12-31';
            //             if($lv->period > 0){
            //                 $tempEndDateX =date("Y-m-d", strtotime("+".strval($lv->period)." month", strtotime(date("Y-m-d"))));
            //             }
                        
            //             $tobe = new MMembershipCustomer();
            //             $tobe->id_membership = $result["prev_level_id"];
            //             $tobe->id_customer = $id_user;
            //             $tobe->start_date = date('Y-m-d');
            //             $tobe->end_date = $tempEndDateX;
            //             $tobe->status = "Active";
            //             $tobe->created_date = date('Y-m-d H:i:s');
            //             $tobe->id_client = $result["id_client"];
            //             if($tobe->save()){
            //                 $current->save();
            //             }
            //         }
                    
            //     }
                
            // }
            
            
            if(strtotime(date("Y-m-d H:m:i")) > strtotime(date("Y-m-d H:m:i",strtotime($result["end_date"])))){
                    
                $current = MMembershipCustomer::model()->findByAttributes(['id_customer' => $id_user, 'status'=>'Active']);
                
                $current->status='Inactive';
                $tempEndDate=$current->end_date;
                $current->end_date=date('Y-m-d H:i:s');
                
                
                    $lv = MMembershipLevel::model()->findByAttributes(['id' => $result["prev_level_id"]]);
                    // vdump($lv);die;
                    if($lv){
                        $tempEndDateX = '2099-12-31 00:00:00';
                        if($lv->period > 0){
                            // print_r("+".strval($lv->period)." month");die;
                            $x = "+".strval($lv->period)." month";
                            $tempEndDateX = date("Y-m-d H:i:s", strtotime($x, strtotime(date("Y-m-d H:i:s"))));
                            
                            // die;
                        }
                        
                        
                        $tobe = new MMembershipCustomer();
                        
                        if($result["minimum_points"]<=$result["points"]){
                            $tobe->id_membership = $result["level_id"];
                        }else{
                            $tobe->id_membership = $result["prev_level_id"];
                        }
                        
                        $tobe->id_customer = $id_user;
                        $tobe->start_date = date('Y-m-d H:i:s');
                        $tobe->end_date = $tempEndDateX;
                        $tobe->status = "Active";
                        $tobe->created_date = date('Y-m-d H:i:s');
                        $tobe->id_client = $result["id_client"];
                        if($tobe->save()){
                            $current->save();
                        }
                    }else{
                        $lv = MMembershipLevel::model()->findByAttributes(['id' => $result["level_id"]]);
                        $tempEndDateX = '2099-12-31 00:00:00';
                        if($lv->period > 0){
                            // print_r("+".strval($lv->period)." month");die;
                            $x = "+".strval($lv->period)." month";
                            $tempEndDateX = date("Y-m-d H:i:s", strtotime($x, strtotime(date("Y-m-d H:i:s"))));
                            
                            // die;
                        }
                        
                        
                        $tobe = new MMembershipCustomer();
                        
                        if($result["minimum_points"]<=$result["points"]){
                            $tobe->id_membership = $result["level_id"];
                        }else{
                            $tobe->id_membership = $result["level_id"];
                        }
                        
                        $tobe->id_customer = $id_user;
                        $tobe->start_date = date('Y-m-d H:i:s');
                        $tobe->end_date = $tempEndDateX;
                        $tobe->status = "Active";
                        $tobe->created_date = date('Y-m-d H:i:s');
                        $tobe->id_client = $result["id_client"];
                        if($tobe->save()){
                            $current->save();
                        }
                    // vdump("A");die;
                        
                    }
                }
            // $temp = new Temp();
            // $temp->text = json_encode("-v-");
            // $temp->date = date('Y-m-d H:i:s');
            // $temp->save();
	    
	}

}

